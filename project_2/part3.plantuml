@startuml
title Sequence Diagram - User Sign In

actor Customer
participant UserInterface as "Frontend (UI)"
participant AuthController as "AuthController (Backend)"
participant CustomerModel as "Customer Model"
database DB as "Postgres DB"

Customer -> UserInterface : Enter email/password
UserInterface -> AuthController : POST /api/login (email, password)
AuthController -> DB : SELECT * FROM Customer WHERE email=email
DB --> AuthController : return customer record
AuthController -> CustomerModel : validatePassword()
CustomerModel --> AuthController : success/failure

AuthController -> UserInterface : return JWT token / error
UserInterface -> Customer : redirect to dashboard or show error

@enduml

newpage

@startuml
title Sequence Diagram - Add Expense Flow

actor Customer
participant UserInterface as "Frontend (UI)"
participant ExpenseController as "ExpensesController (Backend)"
participant Account as "Account Model"
participant Expense as "Expense Model"
database DB as "Postgres DB"

Customer -> UserInterface : Click "Add Expense"
UserInterface -> ExpenseController : POST /api/expenses (amount, category, note)
ExpenseController -> Account : validateAccount(customerId)
Account --> ExpenseController : Account details verified

ExpenseController -> Expense : createExpense(amount, date, category, note)
Expense -> DB : INSERT INTO Expense(...)
DB --> Expense : Success (expenseId)

Expense --> ExpenseController : Expense object created
ExpenseController -> Account : updateTotals()
Account --> ExpenseController : Totals updated

ExpenseController -> UserInterface : Return success message + new expense data
UserInterface -> Customer : Display updated list and totals

@enduml

newpage

@startuml
title Sequence Diagram - View Dashboard

actor Customer
participant UserInterface as "Frontend (UI)"
participant DashboardController as "DashboardController (Backend)"
participant Account as "Account Model"
participant Expense as "Expense Model"
participant Budget as "Budget Model"
participant Goal as "Goal Model"
participant Dashboard as "Dashboard Component"

Customer -> UserInterface : Open Dashboard
UserInterface -> DashboardController : GET /api/dashboard
DashboardController -> Account : getAccountData(customerId)
DashboardController -> Expense : getExpenses(accountId)
DashboardController -> Budget : getBudgets(accountId)
DashboardController -> Goal : getGoals(accountId)
DashboardController -> Dashboard : generateCharts(expenses, budgets, goals)

Dashboard -> UserInterface : return dashboardData
UserInterface -> Customer : Render charts, goals, spending summary

@enduml

newpage

@startuml
title Sequence Diagram - Generate Financial Report

actor Customer
participant UserInterface as "Frontend (UI)"
participant ReportController as "ReportController (Backend)"
participant Account as "Account Model"
participant Expense as "Expense Model"
participant Report as "Report Model"
database DB as "Postgres DB"

Customer -> UserInterface : Request Report (Date Range)
UserInterface -> ReportController : GET /api/report?startDate=X&endDate=Y
ReportController -> Account : getAccountData(customerId)
ReportController -> Expense : fetchExpenses(startDate, endDate)
Expense -> DB : SELECT * FROM Expenses WHERE date BETWEEN startDate AND endDate
DB --> Expense : Return expenses list
ReportController -> Report : generateReport(expenses)
Report -> DB : INSERT INTO Reports(summary, total, dateRange)
DB --> Report : Return reportId

ReportController -> UserInterface : Return downloadable report link
UserInterface -> Customer : Display summary & download option

@enduml

